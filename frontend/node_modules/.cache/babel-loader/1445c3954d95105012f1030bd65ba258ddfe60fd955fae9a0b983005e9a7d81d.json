{"ast":null,"code":"var _jsxFileName = \"/Users/muhammad/Desktop/charity-fund-project/frontend/src/App.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React from 'react';\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// import AuthPage from './pages/AuthPage';\n// // import { HomePageWrapper } from './pages/HomePage';  // Импортируем HomePageWrapper вместо HomePage\n// import HomePage from './pages/HomePage';\n\n// import AdminPage from './pages/AdminPage';\n\n// function App() {\n//   return (\n//     <Router>\n//       <Routes>\n//         <Route path=\"/\" element={<AuthPage />} />\n//         <Route path=\"/home\" element={<HomePage />} />\n//         <Route path=\"/admin\" element={<AdminPage />} />\n//       </Routes>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-blue-500 text-white p-4\",\n    children: \"\\u041F\\u0440\\u0438\\u0432\\u0435\\u0442, Tailwind!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 6\n  }, this);\n}\n\n// function App() {\n//   return (\n//     <div className=\"min-h-screen bg-blue-500 flex items-center justify-center\">\n//       <h1 className=\"text-3xl text-white font-bold\">Testing Tailwind CSS!</h1>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import { Button } from './components/ui/Button';\n// import { Input } from './components/ui/Input';\n// import { Card, CardContent, CardHeader, CardTitle } from './components/ui/Card';\n// import { Dialog, DialogContent, DialogHeader, DialogTitle } from './components/ui/Dialog';\n// import { Checkbox } from './components/ui/Checkbox';\n// import { Progress } from './components/ui/Progress';\n// import { UserIcon } from 'lucide-react';\n// import axios from 'axios';\n// // import { loadStripe } from '../stripe/stripe-js';\n// // import { Elements, CardElement, useStripe, useElements } from '../stripe/react-stripe-js';\n\n// // const stripePromise = loadStripe('your-publishable-key');\n\n// export default function HomePage() {\n//   const [showProfile, setShowProfile] = useState(false);\n//   const [showCardModal, setShowCardModal] = useState(false);\n//   const [paymentAmount, setPaymentAmount] = useState('');\n//   const [isRecurring, setIsRecurring] = useState(false);\n//   const [progress, setProgress] = useState(0);\n//   const [infoText, setInfoText] = useState('');\n//   const [fundName, setFundName] = useState('');\n//   const [fundGoal, setFundGoal] = useState(0);\n//   const userId = localStorage.getItem('userId');\n//   const accessToken = localStorage.getItem('accessToken');\n\n//   // const stripe = useStripe();\n//   // const elements = useElements();\n\n//   useEffect(() => {\n//     axios.get('http://localhost:8000/api/admin/fund-settings/')\n//       .then(response => {\n//         setInfoText(response.data.info_text);\n//         setFundName(response.data.fund_name);\n//         setFundGoal(response.data.fund_goal);\n//         const progressPercentage = (response.data.total_raised / response.data.fund_goal) * 100;\n//         setProgress(progressPercentage);\n//       })\n//       .catch(error => {\n//         console.error('Failed to fetch fund settings:', error);\n//       });\n//   }, []);\n\n//   const handlePayment = async (e) => {\n//     e.preventDefault();\n//     setShowCardModal(true);\n//   };\n\n//   // Закомментированный код обработки платежа с помощью карты\n//   /*\n//   const handleCardPayment = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       return;\n//     }\n\n//     const cardElement = elements.getElement(CardElement);\n\n//     try {\n//       const { paymentMethod } = await stripe.createPaymentMethod({\n//         type: 'card',\n//         card: cardElement,\n//       });\n\n//       await axios.post('http://localhost:8000/api/payments/process/', {\n//         user_id: userId,\n//         amount: paymentAmount,\n//         payment_method_id: paymentMethod.id,\n//         is_recurring: isRecurring,\n//       }, {\n//         headers: {\n//           Authorization: `Bearer ${accessToken}`,\n//         },\n//       });\n\n//       alert('Payment successful!');\n//       setShowCardModal(false);\n//     } catch (error) {\n//       console.error('Payment failed:', error);\n//       alert('Payment failed.');\n//     }\n//   };\n//   */\n\n//   return (\n//     <div className=\"min-h-screen bg-gray-100\">\n//       <header className=\"bg-white shadow-sm\">\n//         <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center\">\n//           <h1 className=\"text-2xl font-bold\">Charity Fund</h1>\n//           <Button variant=\"ghost\" onClick={() => setShowProfile(true)}>\n//             <UserIcon className=\"h-6 w-6\" />\n//           </Button>\n//         </div>\n//       </header>\n\n//       <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n//         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n//           <Card>\n//             <CardHeader>\n//               <CardTitle>Make a Payment</CardTitle>\n//             </CardHeader>\n//             <CardContent>\n//               <form onSubmit={handlePayment} className=\"space-y-4\">\n//                 <Input\n//                   type=\"number\"\n//                   placeholder=\"Amount\"\n//                   value={paymentAmount}\n//                   onChange={(e) => setPaymentAmount(e.target.value)}\n//                   required\n//                 />\n//                 <div className=\"flex items-center space-x-2\">\n//                   <Checkbox\n//                     id=\"recurring\"\n//                     checked={isRecurring}\n//                     onCheckedChange={(checked) => setIsRecurring(checked)}\n//                   />\n//                   <label htmlFor=\"recurring\">Set up recurring payment</label>\n//                 </div>\n//                 <Button type=\"submit\" className=\"w-full\">Pay</Button>\n//               </form>\n//             </CardContent>\n//           </Card>\n\n//           <Card>\n//             <CardHeader>\n//               <CardTitle>Information</CardTitle>\n//             </CardHeader>\n//             <CardContent>\n//               <p>{infoText}</p>\n//             </CardContent>\n//           </Card>\n//         </div>\n\n//         <Card className=\"mt-8\">\n//           <CardHeader>\n//             <CardTitle>{fundName}</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <Progress value={progress} className=\"w-full\" />\n//             <p className=\"mt-2 text-center\">{progress.toFixed(2)}% of the target amount raised</p>\n//           </CardContent>\n//         </Card>\n//       </main>\n\n//       <Dialog open={showProfile} onOpenChange={setShowProfile}>\n//         <DialogContent>\n//           <DialogHeader>\n//             <DialogTitle>Profile</DialogTitle>\n//           </DialogHeader>\n//           <div className=\"space-y-4\">\n//             <Button className=\"w-full\">Change Phone Number</Button>\n//             <Button className=\"w-full\">Change Payment Details</Button>\n//             <Button variant=\"destructive\" className=\"w-full\">Delete Account</Button>\n//           </div>\n//         </DialogContent>\n//       </Dialog>\n\n//       {/* Закомментированный код для привязки карты */}\n//       {/*\n//       <Dialog open={showCardModal} onOpenChange={setShowCardModal}>\n//         <DialogContent>\n//           <DialogHeader>\n//             <DialogTitle>Link Card</DialogTitle>\n//           </DialogHeader>\n//           <form onSubmit={handleCardPayment} className=\"space-y-4\">\n//             <CardElement options={{ hidePostalCode: true }} />\n//             <Button type=\"submit\" className=\"w-full\">Link and Pay</Button>\n//           </form>\n//         </DialogContent>\n//       </Dialog>\n//       */}\n//     </div>\n//   );\n// }\n\n// // Закомментированный код обертки HomePage с элементами Stripe\n// /*\n// export function HomePageWrapper() {\n//   return (\n//     <Elements stripe={stripePromise}>\n//       <HomePage />\n//     </Elements>\n//   );\n// }\n// */\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_jsxDEV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/muhammad/Desktop/charity-fund-project/frontend/src/App.js"],"sourcesContent":["\n// import React from 'react';\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// import AuthPage from './pages/AuthPage';\n// // import { HomePageWrapper } from './pages/HomePage';  // Импортируем HomePageWrapper вместо HomePage\n// import HomePage from './pages/HomePage';\n\n// import AdminPage from './pages/AdminPage';\n\n// function App() {\n//   return (\n//     <Router>\n//       <Routes>\n//         <Route path=\"/\" element={<AuthPage />} />\n//         <Route path=\"/home\" element={<HomePage />} />\n//         <Route path=\"/admin\" element={<AdminPage />} />\n//       </Routes>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\nfunction App() {\n  return (\n     <div className=\"bg-blue-500 text-white p-4\">\n         Привет, Tailwind!\n     </div> \n  );\n}\n\n\n// function App() {\n//   return (\n//     <div className=\"min-h-screen bg-blue-500 flex items-center justify-center\">\n//       <h1 className=\"text-3xl text-white font-bold\">Testing Tailwind CSS!</h1>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { Button } from './components/ui/Button';\n// import { Input } from './components/ui/Input';\n// import { Card, CardContent, CardHeader, CardTitle } from './components/ui/Card';\n// import { Dialog, DialogContent, DialogHeader, DialogTitle } from './components/ui/Dialog';\n// import { Checkbox } from './components/ui/Checkbox';\n// import { Progress } from './components/ui/Progress';\n// import { UserIcon } from 'lucide-react';\n// import axios from 'axios';\n// // import { loadStripe } from '../stripe/stripe-js';\n// // import { Elements, CardElement, useStripe, useElements } from '../stripe/react-stripe-js';\n\n// // const stripePromise = loadStripe('your-publishable-key');\n\n// export default function HomePage() {\n//   const [showProfile, setShowProfile] = useState(false);\n//   const [showCardModal, setShowCardModal] = useState(false);\n//   const [paymentAmount, setPaymentAmount] = useState('');\n//   const [isRecurring, setIsRecurring] = useState(false);\n//   const [progress, setProgress] = useState(0);\n//   const [infoText, setInfoText] = useState('');\n//   const [fundName, setFundName] = useState('');\n//   const [fundGoal, setFundGoal] = useState(0);\n//   const userId = localStorage.getItem('userId');\n//   const accessToken = localStorage.getItem('accessToken');\n\n//   // const stripe = useStripe();\n//   // const elements = useElements();\n\n//   useEffect(() => {\n//     axios.get('http://localhost:8000/api/admin/fund-settings/')\n//       .then(response => {\n//         setInfoText(response.data.info_text);\n//         setFundName(response.data.fund_name);\n//         setFundGoal(response.data.fund_goal);\n//         const progressPercentage = (response.data.total_raised / response.data.fund_goal) * 100;\n//         setProgress(progressPercentage);\n//       })\n//       .catch(error => {\n//         console.error('Failed to fetch fund settings:', error);\n//       });\n//   }, []);\n\n//   const handlePayment = async (e) => {\n//     e.preventDefault();\n//     setShowCardModal(true);\n//   };\n\n//   // Закомментированный код обработки платежа с помощью карты\n//   /*\n//   const handleCardPayment = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       return;\n//     }\n\n//     const cardElement = elements.getElement(CardElement);\n\n//     try {\n//       const { paymentMethod } = await stripe.createPaymentMethod({\n//         type: 'card',\n//         card: cardElement,\n//       });\n\n//       await axios.post('http://localhost:8000/api/payments/process/', {\n//         user_id: userId,\n//         amount: paymentAmount,\n//         payment_method_id: paymentMethod.id,\n//         is_recurring: isRecurring,\n//       }, {\n//         headers: {\n//           Authorization: `Bearer ${accessToken}`,\n//         },\n//       });\n\n//       alert('Payment successful!');\n//       setShowCardModal(false);\n//     } catch (error) {\n//       console.error('Payment failed:', error);\n//       alert('Payment failed.');\n//     }\n//   };\n//   */\n\n//   return (\n//     <div className=\"min-h-screen bg-gray-100\">\n//       <header className=\"bg-white shadow-sm\">\n//         <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center\">\n//           <h1 className=\"text-2xl font-bold\">Charity Fund</h1>\n//           <Button variant=\"ghost\" onClick={() => setShowProfile(true)}>\n//             <UserIcon className=\"h-6 w-6\" />\n//           </Button>\n//         </div>\n//       </header>\n\n//       <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n//         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n//           <Card>\n//             <CardHeader>\n//               <CardTitle>Make a Payment</CardTitle>\n//             </CardHeader>\n//             <CardContent>\n//               <form onSubmit={handlePayment} className=\"space-y-4\">\n//                 <Input\n//                   type=\"number\"\n//                   placeholder=\"Amount\"\n//                   value={paymentAmount}\n//                   onChange={(e) => setPaymentAmount(e.target.value)}\n//                   required\n//                 />\n//                 <div className=\"flex items-center space-x-2\">\n//                   <Checkbox\n//                     id=\"recurring\"\n//                     checked={isRecurring}\n//                     onCheckedChange={(checked) => setIsRecurring(checked)}\n//                   />\n//                   <label htmlFor=\"recurring\">Set up recurring payment</label>\n//                 </div>\n//                 <Button type=\"submit\" className=\"w-full\">Pay</Button>\n//               </form>\n//             </CardContent>\n//           </Card>\n\n//           <Card>\n//             <CardHeader>\n//               <CardTitle>Information</CardTitle>\n//             </CardHeader>\n//             <CardContent>\n//               <p>{infoText}</p>\n//             </CardContent>\n//           </Card>\n//         </div>\n\n//         <Card className=\"mt-8\">\n//           <CardHeader>\n//             <CardTitle>{fundName}</CardTitle>\n//           </CardHeader>\n//           <CardContent>\n//             <Progress value={progress} className=\"w-full\" />\n//             <p className=\"mt-2 text-center\">{progress.toFixed(2)}% of the target amount raised</p>\n//           </CardContent>\n//         </Card>\n//       </main>\n\n//       <Dialog open={showProfile} onOpenChange={setShowProfile}>\n//         <DialogContent>\n//           <DialogHeader>\n//             <DialogTitle>Profile</DialogTitle>\n//           </DialogHeader>\n//           <div className=\"space-y-4\">\n//             <Button className=\"w-full\">Change Phone Number</Button>\n//             <Button className=\"w-full\">Change Payment Details</Button>\n//             <Button variant=\"destructive\" className=\"w-full\">Delete Account</Button>\n//           </div>\n//         </DialogContent>\n//       </Dialog>\n\n//       {/* Закомментированный код для привязки карты */}\n//       {/*\n//       <Dialog open={showCardModal} onOpenChange={setShowCardModal}>\n//         <DialogContent>\n//           <DialogHeader>\n//             <DialogTitle>Link Card</DialogTitle>\n//           </DialogHeader>\n//           <form onSubmit={handleCardPayment} className=\"space-y-4\">\n//             <CardElement options={{ hidePostalCode: true }} />\n//             <Button type=\"submit\" className=\"w-full\">Link and Pay</Button>\n//           </form>\n//         </DialogContent>\n//       </Dialog>\n//       */}\n//     </div>\n//   );\n// }\n\n// // Закомментированный код обертки HomePage с элементами Stripe\n// /*\n// export function HomePageWrapper() {\n//   return (\n//     <Elements stripe={stripePromise}>\n//       <HomePage />\n//     </Elements>\n//   );\n// }\n// */\n\n\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,GAAGA,CAAA,EAAG;EACb,oBACGC,OAAA;IAAKC,SAAS,EAAC,4BAA4B;IAAAC,QAAA,EAAC;EAE5C;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEX;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,EAAA,GAnNSR,GAAG;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}